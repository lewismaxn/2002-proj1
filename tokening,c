#include <stdio.h>
#include <stdlib.h>
#include <stdlib.h>
#include <ctype.h>


// Enum will assign a value for every token 

typedef enum {
    TOKEN_IDENTIFIER,
    TOKEN_NUMBER,
    TOKEN_ASSIGN,
    TOKEN_OPERATOR,
    TOKEN_PRINT,
    TOKEN_FUNCTION,
    TOKEN_RETURN,
    TOKEN_LPAREN,
    TOKEN_RPAREN,
    TOKEN_COMMA,
    TOKEN_END
} TokenType;

typedef struct {
    TokenType type;
    char value[100];
} Token;



void initialiser(void) {
    //declaring a buffer for our line
    char line[BUFSIZ];
    // declaring an int for our position to sit in
    int pos = 0;
    // declaring a token variable for get_next_token
    Token token;

    // file pointer for our file to read from
    FILE *infile = fopen("program.ml", "r");
    
    printf("Printing tokens now: \n\n");
    // checking if there is a newline available
    while (fgets(line, sizeof(line), infile) != NULL) {
        token = get_next_token(line, &pos);
        if (token.type == TOKEN_END) break;
        
        printf("Token Type = %d, Value = %s\n", token.type, token.value);
    }

}


Token get_next_token(char *input, int *pos) {
    Token token;
    while (isspace(input[*pos])) (*pos)++;  // Skip whitespace

    if (isalpha(input[*pos])) {  // Identifiers or keywords
        int start = *pos;
        while (isalnum(input[*pos])) (*pos)++;
        strncpy(token.value, &input[start], *pos - start);
        token.value[*pos - start] = '\0';

        if (strcmp(token.value, "print") == 0)
            token.type = TOKEN_PRINT;
        else if (strcmp(token.value, "function") == 0)
            token.type = TOKEN_FUNCTION;
        else if (strcmp(token.value, "return") == 0)
            token.type = TOKEN_RETURN;
        else
            token.type = TOKEN_IDENTIFIER;
    } 
    else if (isdigit(input[*pos])) {  // Numbers
        int start = *pos;
        while (isdigit(input[*pos]) || input[*pos] == '.') (*pos)++;
        strncpy(token.value, &input[start], *pos - start);
        token.value[*pos - start] = '\0';
        token.type = TOKEN_NUMBER;
    } 
    else if (input[*pos] == '<' && input[*pos + 1] == '-') {  // Assignment
        (*pos) += 2;
        token.type = TOKEN_ASSIGN;
    } 
    else if (input[*pos] == '+' || input[*pos] == '-' || input[*pos] == '*' || input[*pos] == '/') {  // Operators
        token.value[0] = input[*pos];
        token.value[1] = '\0';
        token.type = TOKEN_OPERATOR;
        (*pos)++;
    }
    else if (input[*pos] == '(') {
        token.type = TOKEN_LPAREN;
        (*pos)++;
    } 
    else if (input[*pos] == ')') {
        token.type = TOKEN_RPAREN;
        (*pos)++;
    } 
    else if (input[*pos] == ',') {
        token.type = TOKEN_COMMA;
        (*pos)++;
    } 
    else if (input[*pos] == '\0') {
        token.type = TOKEN_END;
    } 
    else {
        printf("Unexpected character: %c\n", input[*pos]);
        exit(1);
    }

    return token;
}